#! /usr/bin/env python

import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *

class SuicideButton(QPushButton):
    
    def __init__(self, text="Click Me!", parent=None):
        super(SuicideButton, self).__init__(text, parent)
        self.__text = text
        self.__timer = QTimer(self)
        self.__timerSet = False
        self.__count = 5
        
        self.connect(self.__timer, SIGNAL("timeout()"), self.timerHandler)
        self.connect(self, SIGNAL("pressed()"), self.pressHandler)
        self.connect(self, SIGNAL("clicked(bool)"), self.clickHandler)
        
    def pressHandler(self):
        if not self.__timerSet:
            self.setText("Yes, do it!")
    
    def clickHandler(self, checked):
        if self.__timerSet:
            self.__timerSet = False
            self.__timer.stop()
            self.setText("Awww...")
            self.__timer.start()
        else:
            self.__count = 5
            self.__timerSet = True
            self.__timer.setInterval(1000)
            self.__timer.start()
            self.timerHandler()
    
    def timerHandler(self):
        if self.__timerSet:
            if self.__count == 0:
                self.__timer.stop()
                self.close()
            else:
                plural = "s"
                if self.__count == 1:
                    plural = ""
                self.setText("%d second%s!" % (self.__count, plural))
                self.__count = self.__count - 1
        else:
            self.setText(self.__text)
            self.__timer.stop()


class Panel(QWidget):
    def __init__(self, parent = None, flags = Qt.WindowFlags()):
        super(Panel, self).__init__(parent, flags)
        
    def mouseReleaseEvent(self, event):
        pos = event.pos()
        child = self.childAt(pos)
        if child is None:
            child = SuicideButton(parent=self)
            x = pos.x() - (child.width() / 2)
            y = pos.y() - (child.height() / 2)
            child.move(x,y)
            child.show()
        else:
            child.close()

if __name__ == '__main__':
	sys.path.append('../robotrock')
	import main
	main.init_gui()
	#sys.exit(app.exec_())
